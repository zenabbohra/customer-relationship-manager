package zenab.project.customerRelationshipManager.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;
import zenab.project.customerRelationshipManager.entities.Customer;
import zenab.project.customerRelationshipManager.repositories.CustomerRepository;

import java.util.UUID;

@Controller
public class CustomerController {
    @GetMapping("/addCustomer.html")
    public String firstPage() {
        return "addCustomer";
    }

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CustomerRepository customerRepository;

    @PostMapping(path = "/add", consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE) // Map ONLY POST Requests
    public String addNewCustomer(@RequestBody MultiValueMap<String, String> formData) {

        var firstName = formData.getFirst("firstName");
        var lastname = formData.getFirst("lastName");
        var email = formData.getFirst("email");

        Customer customer = new Customer();
        customer.setFirstName(firstName);
        customer.setLastName(lastname);
        customer.setEmail(email);
        customerRepository.save(customer);
        return "redirect:/home.html";
    }

    @GetMapping(path = "/update/{customerId}")
    public String updateCustomer(@PathVariable UUID customerId, Model model) {

        var customerOptional = customerRepository.findById(customerId);
        if (customerOptional.isEmpty()) {
            throw new ResponseStatusException(
                    HttpStatus.NOT_FOUND, "entity not found"
            );
        }
        var customer = customerOptional.get();
        model.addAttribute("customer", customer);

        return "update";
    }

    @PostMapping(path = "/update/{customerId}", consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE) // Map ONLY POST Requests
    public String updateCustomer(@RequestBody MultiValueMap<String, String> formData,
                          @PathVariable UUID customerId) {

        var firstName = formData.getFirst("firstName");
        var lastname = formData.getFirst("lastName");
        var email = formData.getFirst("email");


        var customerOptional = customerRepository.findById(customerId);
        if (customerOptional.isEmpty()) {
            throw new ResponseStatusException(
                    HttpStatus.NOT_FOUND, "entity not found"
            );
        }
        var customer = customerOptional.get();
        customer.setFirstName(firstName);
        customer.setLastName(lastname);
        customer.setEmail(email);
        customerRepository.save(customer);

        return "redirect:/home.html";
    }

    @GetMapping(path="/delete/{customerId}")
    public String deleteCustomer(@PathVariable UUID customerId) {

        customerRepository.deleteById(customerId);
        return "redirect:/home.html";
    }

    // TODO : use jackson library to render json object here
    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<Customer> getAllCustomers() {
        // This returns a JSON or XML with the users
        return customerRepository.findAll();
    }
}
